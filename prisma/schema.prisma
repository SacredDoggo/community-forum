// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Tag {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  name               String                @unique
  interested_users   UserTag[] // Reverse relation for UserTag
  uninterested_users UserUninterestedTag[] // Reverse relation for UserUninterestedTag
}

model UserTag {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @db.ObjectId
  tag     Tag    @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id  String @db.ObjectId
  weight  Float  @default(1.0) // Weight to indicate importance
}

model UserUninterestedTag {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @db.ObjectId
  tag     Tag    @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id  String @db.ObjectId
}

model User {
  id                String   @id @map("_id") @db.ObjectId
  liked_posts       String[] @default([])
  saved_posts       String[] @default([])
  disliked_posts    String[] @default([])
  liked_comments    String[] @default([])
  disliked_comments String[] @default([])

  posts    Post[]
  comments Comment[]

  interested_tags   UserTag[]
  uninterested_tags UserUninterestedTag[]
}

model Post {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id        String   @db.ObjectId
  title          String
  content        String
  tags           String[] @default([])
  draft          Boolean  @default(false)
  archived       Boolean  @default(false)
  likes          Int      @default(0)
  dislikes       Int      @default(0)
  total_comments Int      @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  User User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Comment {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id          String   @db.ObjectId
  parent_comment   String?  @db.ObjectId
  post_id          String   @db.ObjectId
  comement_content String
  likes            Int      @default(0)
  dislikes         Int      @default(0)
  replies          Int      @default(0)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  User User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
